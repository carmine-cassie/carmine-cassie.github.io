    </div>

    <script id = "vertexShader" type="shader">
      varying vec2 vUv;

      void main() {
        vUv = uv;
        gl_Position = vec4(position, 1.0);
      }
    </script>
    <script id = "fragmentShader" type="shader">
      uniform float time;
      uniform sampler2D grav_lens;
      uniform sampler2D accretion_disk;
      uniform sampler2D stars;
      uniform float aspect;

      varying highp vec2 vUv;

      // Function that scales a value around 0.5
      float scale(float value, float scale) {
        return ((value - 0.5) * scale) + 0.5;
      }

      void main()
      {

        // This is our colour-ramp
        // TODO look into making this an array with a custom ramping function
        vec4 colour1 = vec4(0.05, 0.0, 0.02, 1.0); // ##29000f
        vec4 colour2 = vec4(0.61, 0.0, 0.2, 1.0); // #9c0033
        vec4 colour3 = vec4(0.84, 0.61, 0.64, 1.0); // #d69ca3
        vec4 colour4 = vec4(1.0, 1.0, 1.0, 1.0);   // 

        // The textures are 4:3, so I scale our aspect ratio to be relative
        // to 4:3s
        float ratio = aspect * 3.0 / 4.0;

        // We scale the uv to fit the images on the screen with correct aspect
        vec2 fitUv = vUv;
        if (ratio < 1.0) {
          // Taller than normal
          // So stretch out sideways
          fitUv.x = scale(vUv.x, ratio);
        } else if (ratio > 1.0) {
          // Shorter than normal
          // So stretch out upways
          fitUv.y = scale(vUv.y, 1.0 / ratio);
        }    
        // Add the stars
        float brightness = texture2D(stars, fitUv).x;

        // Colorramp the brightness across our gradient
        float third = 1.0 / 3.0;
        if (brightness < third) {
          gl_FragColor = mix(colour1, colour2, brightness * 3.0);
        } else if (brightness < 2.0 * third) {
          gl_FragColor = mix(colour2, colour3, brightness * 3.0 - 1.0);
        } else {
          gl_FragColor = mix(colour3, colour4, brightness * 3.0 - 2.0);
        }
        
      }
    </script>
  </body>
</html>
